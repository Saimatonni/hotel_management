generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  name        String?
  email       String      @unique
  password    String?
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  properties  Property[]  // A user can own multiple properties
  bookings    Booking[]
  reviews     Review[]
  favorites   Favorite[]
  socialLogin SocialLogin?
}

model Property {
  id             String      @id @default(uuid())
  name           String
  address        String
  costPerNight   Decimal
  availableRooms Int
  averageRating  Float       @default(0.0)
  description    String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  ownerId        String
  owner          User        @relation(fields: [ownerId], references: [id])
  images         Image[]
  reviews        Review[]
  bookings       Booking[]
  favorites      Favorite[]
}

model Review {
  id         String   @id @default(uuid())
  rating     Int      @default(5)
  comment    String?
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Booking {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  checkIn     DateTime
  checkOut    DateTime
  totalAmount Decimal
  createdAt   DateTime @default(now())
}

model Image {
  id          String   @id @default(uuid())
  url         String
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
}

model SocialLogin {
  id        String  @id @default(uuid())
  provider  String
  providerId String @unique
  userId    String  @unique  // Ensuring one-to-one relationship
  user      User    @relation(fields: [userId], references: [id])
}
